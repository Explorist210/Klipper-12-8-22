# This file contains common pin mappings for the BigTreeTech OctoPus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths							[mcu] section
## Thermistor types						[extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Z Endstop Switch location			[safe_z_home] section
## Homing end position				[gcode_macro G32] section
## Z Endstop Switch  offset for Z0		[stepper_z] section
## Probe points							[quad_gantry_level] section
## Min & Max gantry corner postions		[quad_gantry_level] section
## PID tune								[extruder] and [heater_bed] sections
## Probe pin								[probe] section
## Fine tune E steps					[extruder] section


[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    150,150,20  # an example


[mcu]
##	[X in MOTOR0] - B Motor
##	[Y in MOTOR1] - A Motor
##	[E in MOTOR6] - Extruder
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_33001E000650534E4E313120-if00
#restart_method: command
##--------------------------------------------------------------------

[include ercf_hardware.cfg]
[include ercf_software.cfg]
[include ercf_parameters.cfg]

[gcode_macro Home]
gcode:
  ercf_home

[gcode_macro Eject]
gcode:
  ercf_eject

[gcode_macro Unlock]
gCode:
  ERCF_UNLOCK   


[input_shaper]
#shaper_freq_x: 53.4
#shaper_type_x: mzv
#shaper_freq_y: 41.8
#shaper_type_y: mzv
##--------------------------------------------------------------------

[printer]
max_accel: 5000  # should not exceed the estimated max_accel for X and Y axes

[printer]
kinematics: corexy
max_velocity: 550  
max_accel: 5000    			#Max 4000
max_z_velocity: 10 			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0


######################################################################
# 	X/Y Stepper Settings
#####################################################################

## X Stepper on MOTOR0(B Motor)
[stepper_x]
step_pin: PF13
dir_pin: !PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 400 for 0.9 degree stepper
endstop_pin: PG6
position_min: 0
##--------------------------------------------------------------------

##	Uncomment for 300mm build
position_endstop: 300
position_max: 300

##--------------------------------------------------------------------
homing_speed: 45   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: False
run_current: 1.0
#hold_current: 0.70
sense_resistor: 0.110
#stealthchop_threshold: 0

## Y Stepper on MOTOR1 (A Motor)
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 400 for 0.9 degree stepper
endstop_pin: PG9
position_min: 0
##--------------------------------------------------------------------

##	Uncomment for 300mm build
position_endstop: 310
position_max: 310

##--------------------------------------------------------------------
homing_speed: 45  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: False
run_current: 1.0
#hold_current: 0.70
sense_resistor: 0.110
#stealthchop_threshold: 0
 
#####################################################################
# 	Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left on MOTOR2_1
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
endstop_pin: PG10
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: 0
##--------------------------------------------------------------------

##	Uncomment below for 300mm build
position_max: 300

##--------------------------------------------------------------------
position_min: -4
homing_speed: 15
second_homing_speed: 3
homing_retract_dist: 3

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: True
run_current: 1.0
hold_current: 0.50
sense_resistor: 0.110
#stealthchop_threshold: 0

##	Z1 Stepper - Rear Left on MOTOR3
[stepper_z1]
step_pin: PG4
dir_pin: PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: True
run_current: 1.0
hold_current: 0.50
sense_resistor: 0.110
#stealthchop_threshold: 0

##	Z2 Stepper - Rear Right on MOTOR4
[stepper_z2]
step_pin: PF9
dir_pin: !PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: True
run_current: 1.0
hold_current: 0.50
sense_resistor: 0.110
#stealthchop_threshold: 0

##	Z3 Stepper - Front Right on MOTOR5
[stepper_z3]
step_pin: PC13
dir_pin: PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: True
run_current: 1.0
hold_current: 0.50
sense_resistor: 0.110
#stealthchop_threshold: 0


#####################################################################
# 	Extruder
#####################################################################

#	E0 on MOTOR6
[extruder]
step_pin: PE2
dir_pin: !PE3
enable_pin: !PD4
##	Update value below when you perform extruder calibration
##	If you ask for 100mm of filament, but in reality it is 98mm:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 8	#Bondtech 5mm Drive Gears
##	Update Gear Ratio depending on your Extruder Type
##	Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##	Use 80:20 for M4, M3.1
#gear_ratio: 50:17				#BMG Gear Ratio
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PA2
##	Validate the following thermistor type to make sure it is correct
sensor_type: ATC Semitec 104GT-2
sensor_pin: PF4
min_temp: 10
max_temp: 270
max_power: 1.0
min_extrude_temp: 180
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##	Try to keep pressure_advance below 1.0
pressure_advance: 0.05
##	Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040
max_extrude_only_distance: 200
max_extrude_cross_section: 50.0

##	E0 on MOTOR6
##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: PE1
interpolate: false
run_current: 0.4
#hold_current: 0.36
sense_resistor: 0.110
#stealthchop_threshold: 0

[firmware_retraction]
retract_length: 0.55
retract_speed: 30
unretract_extra_length: 0
unretract_speed: 30

#[filament_switch_sensor my_sensor]
#pause_on_runout: False
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode:
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
#switch_pin: ^PG12
#   The pin on which the switch is connected. This parameter must be
#   provided.


#####################################################################
# 	Bed Heater
#####################################################################

[heater_bed]
##	SSR Pin - BED_OUT
heater_pin: PA1
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: PF3
##	Adjust Max Power so your heater doesn't warp your bed
max_power: 0.6
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.745


#######################################
#### Enclosure Temp Sensor Section ####
#######################################


[thermistor chamber_temp]
temperature1: 25
resistance1: 10000
beta: 3950


[temperature_sensor enclosure]
sensor_type: chamber_temp
sensor_pin: PF6
min_temp: 0
max_temp: 100
gcode_id: C


[temperature_sensor RaspberryPi]
sensor_type: temperature_host


#####################################################################
# 	Probe
#####################################################################


[probe]
##	Inductive Probe
##	This probe is not used for Z height, only Quad Gantry Leveling

# Select the probe port by type:
## For the PROBE port; use this with the original OMRON sensor.
pin: ^PG11
## For the spare endstop port; use this with the Fotek PL-05N (or generic) inductive probe
# pin: ^PG11
## For Octopus Pro Probe port; NPN and PNP proximity switch types can be set by jumper
# pin: ^PC5

#--------------------------------------------------------------------
z_offset = 6.42
x_offset: 0
y_offset: 22
#x_offset: 0
#y_offset: 25.0
#z_offset: 0
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.008
samples_tolerance_retries: 5


#####################################################################
# 	Fan Control
#####################################################################


[fan]
##	Print Cooling Fan - CNC_FAN0
pin: PA8
kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan hotend_fan]
##	Hotend Fan - CNC_FAN1
pin: PE5
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
fan_speed: 1.0

[multi_pin my_fan]
pins: PD14, PD15

[heater_fan heater_bed]

##	Controller fan - CNC_FAN2
pin=multi_pin:my_fan
max_power: 1.0
kick_start_time: 0.5
heater: heater_bed
heater_temp: 60
fan_speed: 0.8

[heater_fan nevermore]
##	Exhaust fan - CNC_FAN3
pin: PD13
max_power: 0.5
shutdown_speed: 0.0
kick_start_time: 0.5
heater: heater_bed
heater_temp: 60
fan_speed: 1.0


[temperature_sensor octopus_steppers]
sensor_type: Generic 3950
sensor_pin: PF5
#control: watermark
#min_temp: 0
#max_temp: 80
#target_temp: 30


[neopixel my_neopixel]
pin: PB0
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count:24
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0
#initial_WHITE: 0.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.


#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

#[bed_mesh]
#speed: 500
#horizontal_move_z: 15
#mesh_min: 40,40
#mesh_max: 260,260
#probe_count: 5,5
#fade_start: 1.0
#fade_end: 10.0
#mesh_pps: 2,2
#algorithm: bicubic
#bicubic_tension: 0.2
#relative_reference_index: 12
#move_check_distance: 5
#split_delta_z: .025

[bed_mesh]
speed: 100
horizontal_move_z: 15
mesh_min: 40,40
mesh_max: 260,260
algorithm: bicubic
bicubic_tension: 0.1
probe_count: 7,7
mesh_pps: 2,2
relative_reference_index: 24   # (5,3)=7 (3,3)=4 (5,5)=12 (7,7)=24 (7,5)=17 (9,9)=40
move_check_distance: 5.0
split_delta_z: .025
fade_start: 0.6
fade_end: 10
fade_target: 0
 
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_mesh_delta : 25                   ## distance between points
variable_x_mesh_max : 7                    ## max points on x-axis
variable_y_mesh_max : 7                    ## max points on y-axis
variable_mesh_area_offset : 5              ## the clearance between print area and probe area
gcode=
	{% if params.AREA_START and params.AREA_END %}
	## get [bed_mesh] config parameters
		{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
		{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
		{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
		{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
		{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	## get print area min/max from slicer gcode
		{% set area_min_x = params.AREA_START.split(",")[0]|float %}
		{% set area_min_y = params.AREA_START.split(",")[1]|float %}
		{% set area_max_x = params.AREA_END.split(",")[0]|float %}
		{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	## set probing area
		{% if area_min_x - mesh_area_offset >=  safe_min_x %}
			{% set area_min_x = area_min_x - mesh_area_offset %}
			{% else %}
			{% set area_min_x = safe_min_x %}
			{% endif %}
		{% if area_min_y - mesh_area_offset >=  safe_min_y %}
			{% set area_min_y = area_min_y - mesh_area_offset %}
			{% else %}
			{% set area_min_y = safe_min_y %}
			{% endif %}
		{% if area_max_x + mesh_area_offset <=  safe_max_x %}
			{% set area_max_x = area_max_x + mesh_area_offset %}
			{% else %}
			{% set area_max_x = safe_max_x %}
			{% endif %}
		{% if area_max_y + mesh_area_offset <=  safe_max_y %}
			{% set area_max_y = area_max_y + mesh_area_offset %}
			{% else %}
			{% set area_max_y = safe_max_y %}
			{% endif %}
	## set probe counts
		{% set meshPointX = ((area_max_x - area_min_x) / mesh_delta + 1)|round(0)|int %}
		{% if meshPointX < 3 %}
			{% set meshPointX = 3 %}
			{% elif meshPointX > x_mesh_max %}
			{% set meshPointX = x_mesh_max %}
			{% endif %}
		{% set meshPointY = ((area_max_y - area_min_y) / mesh_delta + 1)|round(0)|int %}
		{% if meshPointY < 3 %}
			{% set meshPointY = 3 %}
			{% elif meshPointY > y_mesh_max %}
			{% set meshPointY = y_mesh_max %}
			{% endif %}
	## check for invalid mesh
		{% if meshPointX > 5 %}
			{% if meshPointY == 3 %}  # 7x3 mesh invlaid for bicubic
			{% set meshPointY = 5 %}  # set 7x5 mesh
			{% endif %}
			{% endif %}
		{% if meshPointY > 5 %}
			{% if meshPointX == 3 %}  # 3x7 mesh invlaid for bicubic
			{% set meshPointX = 5 %}  # set 5x7 mesh
			{% endif %}
			{% endif %}
	## set new reference index point
		{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	## send bed mesh parameters
		M117 probe_count={meshPointX},{meshPointY}
		BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} relative_reference_index={referenceIndex} 
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}



[idle_timeout]
timeout: 2500

#[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin 
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
#home_xy_position:96,300
#speed:50
#z_hop:10

[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

#--------------------------------------------------------------------

	
##	Gantry Corners for 300mm Build
##	Uncomment for 300mm build
gantry_corners:
	0,0
	300,300
##	Probe points
points:
	50,25
	50,225
	250,225
	250,25



#--------------------------------------------------------------------
speed: 500
horizontal_move_z: 15
retries: 8
retry_tolerance: 0.008
max_adjust: 10

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
# 	Displays
#####################################################################

## 	Uncomment the display that you have
#--------------------------------------------------------------------

#[display]
##	mini12864 LCD Display
#lcd_type: uc1701
#cs_pin: EXP1_3
#a0_pin: EXP1_4
#rst_pin: EXP1_5
#encoder_pins: ^EXP2_5, ^EXP2_3
#click_pin: ^!EXP1_2
#contrast: 63
#spi_software_miso_pin: EXP2_1
#spi_software_mosi_pin: EXP2_6
#spi_software_sclk_pin: EXP2_2

#[neopixel btt_mini12864]
##	To control Neopixel RGB in mini12864 display
#pin: EXP1_6
#chain_count: 3
#initial_RED: 1
#initial_GREEN: 0.16
#initial_BLUE: 0.0
#color_order: RGB

##	Set RGB values on boot up for each Neopixel. 
##	Index 1 = display, Index 2 and 3 = Knob
#[delayed_gcode setdisplayneopixel]
#initial_duration: 1
#gcode:
#        SET_LED LED=btt_mini12864 RED=1 GREEN=.16 BLUE=0 INDEX=1 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=.16 BLUE=0 INDEX=2 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=.16 BLUE=0 INDEX=3 

#--------------------------------------------------------------------


[include klicky_probe.cfg]






#####################################################################
# 	Macros
#####################################################################


[pause_resume]
recover_velocity: 300.0


[include nozzle_scrub.cfg]


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 5.0) %}
      {% set z_safe = 5.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  G92 E0
  G1 E-1.0 F1500.0
  G90
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% if printer["gcode_macro ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You can't resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
    {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_state
        G90
        {% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
            SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        {% endif %}
        BASE_RESUME
    {% endif %}  

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    status_cleaning
    clean_nozzle
    status_calibrating_z
    M117 Z-Calibration..
    ATTACH_PROBE                # a macro for fetching the probe first
    BASE_CALIBRATE_Z
    DOCK_PROBE                  # and parking it afterwards
    status_ready
    M117


[gcode_macro G32]
gcode:
    status_homing
    G28
    status_meshing
    QUAD_GANTRY_LEVEL
    #G28
    
    ##	Uncomment for 300 build
    G0 X150 Y296 Z20 F3600
    status_ready
    
    #--------------------------------------------------------------------

[gcode_macro SET_BED_TEMPERATURE]
gcode:
  {% set bed_temp = params.TEMPERATURE|default(110)|float %}
  M140 S{bed_temp}

[gcode_macro SET_EXTRUDER_TEMPERATURE]
gcode:
  {% set extruder_temp = params.EXTRUDER_TEMP|default(245)|float %}
  M104 S{extruder_temp}

   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
variable_parameter_EXTRUDER_TEMP: 190
variable_parameter_BED_TEMP: 60
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    G90
    #status_heating
    #M117 Heat-Soak
    #SET_BED_TEMPERATURE                    ; set bed temp andwait to settle
    #G4 P600000
    #SET_EXTRUDER_TEMPERATURE
    G32
    status_meshing
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    CALIBRATE_Z                    ; home all axes
    G1 Z20 F3000                   ; move nozzle away from bed
    status_printing
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F3600            ; park nozzle at rear
    {% if unload|int == 1%}
    ERCF_EJECT
    {% endif %}
    status_ready

    
## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"
[include fluidd.cfg]
[include Stealthburner_led.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 22.572
#*# pid_ki = 2.090
#*# pid_kd = 60.946
#*#
#*# [stepper_z]
#*# position_endstop = 2.2
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 41.432
#*# pid_ki = 1.866
#*# pid_kd = 229.948
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.100000, 0.045000, 0.032500, 0.060000, 0.097500
#*# 	  0.075000, 0.027500, 0.015000, 0.040000, 0.065000
#*# 	  0.037500, 0.002500, 0.000000, 0.027500, 0.045000
#*# 	  0.057500, 0.022500, 0.017500, 0.042500, 0.057500
#*# 	  0.132500, 0.085000, 0.080000, 0.102500, 0.110000
#*# tension = 0.2
#*# min_x = 40.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 40.0
#*# x_count = 5
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 260.0
#*#
#*# [input_shaper]
#*# shaper_type_x = ei
#*# shaper_freq_x = 48.4
#*# shaper_type_y = mzv
#*# shaper_freq_y = 41.6
